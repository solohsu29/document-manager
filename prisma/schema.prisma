// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("USER")
  documents     Document[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String    @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileSize    Int
  fileType    String
  filePath    String
  publicUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  folderId    String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  tags        Tag[]
  versions    Version[]
  permissions Permission[]
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?
  parent      Folder?   @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  children    Folder[]  @relation("FolderToFolder")
  documents   Document[]
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  color       String    @default("#6366F1")
  createdAt   DateTime  @default(now())
  documents   Document[]
}

model Version {
  id          String    @id @default(cuid())
  versionNumber Int
  fileName    String
  fileSize    Int
  filePath    String
  createdAt   DateTime  @default(now())
  documentId  String
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String    @id @default(cuid())
  documentId  String
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  accessLevel String    @default("VIEW")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}